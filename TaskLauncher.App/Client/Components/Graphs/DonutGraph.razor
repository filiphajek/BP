@using Auth0.ManagementApi.Models
@using TaskLauncher.Api.Contracts.Responses
@using TaskLauncher.Authorization
@using TaskLauncher.Common.Extensions
@inject ApiClient client
@attribute [Authorize(Policy = TaskLauncherPolicies.CanViewGraphsPolicy)]

<SpinLoader IsLoading="@(loading)" Spinner="SpinnerType.Circle">
    <ContentTemplate>

        <div class="card">
            <div class="card-title" style="margin:20px 0 0 20px">
                <h4>Finished/All tasks: <b>@model.FinishedTaskCount</b>/<b>@model.AllTaskCount</b></h4>
                <button disabled="@disabledSwitch" class="btn btn-primary" @onclick="SwitchDonutGraph">Switch to @(isVip ? "normal" : "vip") tasks</button>
            </div>
            <div class="card-body">
                <RadzenChart>
                    <RadzenDonutSeries Data="@data" CategoryProperty="Description" ValueProperty="Number" />
                </RadzenChart>
            </div>
        </div>

    </ContentTemplate>
</SpinLoader>

@code
{
    bool loading = false;
    bool disabledSwitch = false;
    bool isVip = false;

    [Parameter]
    public string UserId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> authenticationStateTask { get; set; } = null!;

    record DataItem(string Description, double Number);

    DataItem[] data = Array.Empty<DataItem>();

    UserStatResponse model = new();
    List<UserStatResponse> overallStats = new();

    protected async override Task OnParametersSetAsync()
    {
        loading = true;
        var state = await authenticationStateTask;

        if(!string.IsNullOrEmpty(UserId) && state.User.IsInRole(TaskLauncherRoles.Admin))
        {
            await LoadOverallStats("api/admin/stats?userid=" + UserId);
            loading = false;
            return;
        }

        state.User.TryGetClaimAsBool(TaskLauncherClaimTypes.Vip, out isVip);

        if (state.User.IsInRole(TaskLauncherRoles.User))
            await LoadOverallStats("api/stats");

        if (state.User.IsInRole(TaskLauncherRoles.Admin))
            await LoadOverallStats("api/admin/stats");

        await IsSwitchDisabled();
        loading = false;
    }

    async Task IsSwitchDisabled()
    {
        var state = await authenticationStateTask;
        if (state.User.IsInRole(TaskLauncherRoles.User))
        {
            disabledSwitch = overallStats.Any(i => i.AllTaskCount == 0);
        }
        if (state.User.IsInRole(TaskLauncherRoles.Admin))
        {
            disabledSwitch = false;
        }
    }

    async Task LoadOverallStats(string path)
    {
        overallStats = (await client.GetFromJsonAsync<List<UserStatResponse>>(path))!;
        model = overallStats.Single(i => i.IsVip == isVip);
        data = new DataItem[] { new("Success", model.SuccessTasks), new("Failed", model.FailedTasks), new("Crashed", model.CrashedTasks), new("Timeouted", model.TimeoutedTasks) };
    }

    void SwitchDonutGraph()
    {
        isVip = !isVip;
        model = overallStats.Single(i => i.IsVip == isVip);
        data = new DataItem[] { new("Success", model.SuccessTasks), new("Failed", model.FailedTasks), new("Crashed", model.CrashedTasks), new("Timeouted", model.TimeoutedTasks) };
    }
}