@using Auth0.ManagementApi.Models
@using TaskLauncher.Api.Contracts.Responses
@using TaskLauncher.Authorization
@using TaskLauncher.Common.Extensions
@inject ApiClient client
@attribute [Authorize(Policy = TaskLauncherPolicies.CanViewGraphsPolicy)]

<SpinLoader IsLoading="@(loading)" Spinner="SpinnerType.Circle">
    <ContentTemplate>

        <div class="card">
            <div class="card-title text-center">
                <h4 style="margin-top:10px; margin-bottom:0px">Last activity (time spend by task in queue and worker)</h4>
            </div>
            <div class="card-body">
                <RadzenChart>
                    <RadzenLineSeries Smooth="true" Data="@taskTimes" CategoryProperty="Index" Title="Cpu time" LineType="LineType.Dashed" ValueProperty="CpuTime">
                        <TooltipTemplate Context="data">
                            <div>
                                Cpu time: <b>@data.CpuTimeSpan.ToString(@"hh\:mm\:ss")</b>
                                <br />
                                Is vip: <b>@data.IsVip</b>
                            </div>
                        </TooltipTemplate>
                        <ChildContent>
                            <RadzenMarkers MarkerType="MarkerType.Circle" />
                        </ChildContent>
                    </RadzenLineSeries>
                    <RadzenLineSeries Smooth="true" Data="@taskTimes" CategoryProperty="Index" Title="Queue time" LineType="LineType.Dashed" ValueProperty="TimeInQueue">
                        <TooltipTemplate Context="data">
                            <div>
                                Cpu time: <b>@data.TimeInQueueSpan.ToString(@"hh\:mm\:ss")</b>
                                <br />
                                Is vip: <b>@data.IsVip</b>
                            </div>
                        </TooltipTemplate>
                        <ChildContent>
                            <RadzenMarkers MarkerType="MarkerType.Circle" />
                        </ChildContent>
                    </RadzenLineSeries>
                    <RadzenValueAxis>
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="Time in seconds" />
                    </RadzenValueAxis>
                    <RadzenCategoryAxis Visible="false" />
                </RadzenChart>
            </div>
        </div>

    </ContentTemplate>
</SpinLoader>

@code
{
    bool loading = false;

    record TaskStatDataItem
    {
        public TaskStatDataItem(TimeSpan cpuTime, TimeSpan timeInQueue, string index, bool isVip)
        {
            CpuTime = (int)cpuTime.TotalSeconds;
            TimeInQueue = (int)timeInQueue.TotalSeconds;
            CpuTimeSpan = cpuTime;
            TimeInQueueSpan = timeInQueue;
            Index = index;
            IsVip = isVip;
        }

        public int CpuTime { get; }
        public int TimeInQueue { get; }
        public TimeSpan CpuTimeSpan { get; }
        public TimeSpan TimeInQueueSpan { get; }
        public string Index { get; }
        public bool IsVip { get; }
    }

    [CascadingParameter]
    public Task<AuthenticationState> authenticationStateTask { get; set; } = null!;

    List<TaskStatDataItem> taskTimes = new();

    protected async override Task OnInitializedAsync()
    {
        loading = true;
        var state = await authenticationStateTask;

        if (state.User.IsInRole(TaskLauncherRoles.User))
            await LoadTimesStats("api/stats/times");

        if (state.User.IsInRole(TaskLauncherRoles.Admin))
            await LoadTimesStats("api/admin/stats/times");
        loading = false;
    }

    async Task LoadTimesStats(string path)
    {
        var times = (await client.GetFromJsonAsync<List<TaskStatResponse>>(path))!;
        int j = times.Count, k = times.Count;
        taskTimes = times.Select(i => new TaskStatDataItem(i.CpuTime, i.TimeInQueue, (++j).ToString(), i.IsVip)).ToList();
        taskTimes.Reverse();
    }
}