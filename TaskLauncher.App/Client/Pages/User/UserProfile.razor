@page "/profile"
@using System.Security.Claims
@using Microsoft.Extensions.Primitives
@using TaskLauncher.Api.Contracts.Responses
@using TaskLauncher.Authorization
@using TaskLauncher.Common.Extensions
@using TaskLauncher.Common.Models
@attribute [Authorize]
@inject HttpClient client
@inject DialogService DialogService
@inject NavigationManager NavigationManager

<SpinLoader IsLoading="@(loading)" Spinner="SpinnerType.Circle">
    <ContentTemplate>

        <div class="container">
            <div class="row">
                <ProfileComponent User=User />
            </div>

            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <RadzenTabs TabPosition="TabPosition.Top" style="max-width: 1500px;" RenderMode="TabRenderMode.Client">
                            <Tabs>
                                <RadzenTabsItem Text="Payments">
                                    <GridComponent T="PaymentResponse" Grid="@paymentGrid"></GridComponent>
                                </RadzenTabsItem>
                            </Tabs>
                        </RadzenTabs>
                    </div>
                </div>
            </div>
        </div>
        <AuthorizeView Policy="can-cancel-account">
            <Authorized>
                <button class="btn btn-danger" @onclick="CancelAsync">Cancel account</button>
            </Authorized>
        </AuthorizeView>

    </ContentTemplate>
</SpinLoader>

@code
{
    protected bool loading = true;
    protected UserModel User { get; set; } = new();
    private CGrid<PaymentResponse> paymentGrid;

    protected async override Task OnInitializedAsync()
    {
        User = (await client.GetFromJsonAsync<UserModel>("api/user"))!;

        Action<IGridColumnCollection<PaymentResponse>> columns = c =>
        {
            c.Add(o => o.Price);
            c.Add(o => o.Time);
            c.Add(o => o.Id);
        };
        string url = NavigationManager.BaseUri + $"odata/user/payment?$filter=userid eq '{User.UserId}'";
        var paymentClient = new GridODataClient<PaymentResponse>(client, url, new QueryDictionary<StringValues>(), false, "paymentGrid", columns, 10)
            .ChangePageSize(true)
            .Sortable()
            .WithGridItemsCount();

        paymentGrid = paymentClient.Grid;
        await paymentClient.UpdateGrid();

        loading = false;
    }

    async Task CancelAsync()
    {
        var tmp = await DialogService.Confirm("Are you sure?", "Accout deletion", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (!tmp.HasValue)
            return;
        if (!tmp.Value)
            return;

        await client.DeleteAsync("auth/user/" + User.UserId);
        NavigationManager.NavigateTo("/", true);
    }
}