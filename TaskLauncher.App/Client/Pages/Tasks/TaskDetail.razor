@page "/tasks/{id:guid}"
@using TaskLauncher.Common.Enums
@attribute [Authorize(Policy = "user-policy")]

<SpinLoader IsLoading="@(isLoading)" Spinner="SpinnerType.Circle">
    <ContentTemplate>
        <h1>@Task.Name</h1>
        <p>@Task.Description</p>

        <span>
            Status: @Task.ActualStatus &nbsp;
            @if (Task.ActualStatus == TaskState.Running || Task.ActualStatus == TaskState.Created|| Task.ActualStatus == TaskState.Ready)
            {
                 <span>
                     <span class="spinner-border spinner-border-sm mr-1"></span>
                 </span>
            }
        </span>

        <br />

        @if (Task.ActualStatus == TaskState.Created || Task.ActualStatus == TaskState.Running || Task.ActualStatus == TaskState.Ready)
        {
            <button @onclick="CancelTask" class="btn btn-danger">Cancel task</button>
        }

        @if(Task.ActualStatus == TaskState.Finished || Task.ActualStatus == TaskState.Downloaded)
        {
            <button @onclick="DownloadResultFile" disabled="@isRunning" class="btn btn-primary">Download result</button>
        }

        @if(Task.ActualStatus == TaskState.Downloaded)
        {
            <button class="btn btn-danger">Close task</button>
        }

        @if(Task.ActualStatus == TaskState.Cancelled)
        {
            <button class="btn btn-primary">Start task</button>
        }

        @if (message != "")
        {
            <p>@message</p>
        }

        <br />

        @if (Task.Events is not null)
        {
            <p><b>History</b></p>
            @foreach (var book in Task.Events)
            {
                <p>Status changed to <b>@book.Status</b> at <b>@book.Time</b></p>
            }
        }

    </ContentTemplate>
</SpinLoader>

