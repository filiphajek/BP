@page "/queue"
@using Microsoft.Extensions.Primitives
@using TaskLauncher.Api.Contracts.Responses
@inject NavigationManager NavigationManager
@inject ApiClient HttpClient
@attribute [Authorize(Policy = "admin-policy")]

<PageTitle>Task queue</PageTitle>

@if (task.IsCompleted)
{
    <GridComponent T="TaskResponse" Grid="@grid"></GridComponent>
}
else
{
    <SpinLoader IsLoading="@(true)" Spinner="SpinnerType.Circle"/>
}

@code
{
    private CGrid<TaskResponse> grid;
    private Task task;

    Action<IGridColumnCollection<TaskResponse>> columns = c =>
    {
        c.Add(o => o.Name).Encoded(false).Sanitized(false).RenderValueAs(o => $"<a href='tasks/{o.Id}'>{o.Name}</a>").Sortable(true).Filterable(true);
        c.Add(o => o.Description).RenderValueAs(o => o.Description.Length > 50 ? o.Description[..50] + " ..." : o.Description).Filterable(true);
        c.Add(o => o.CreationDate).Titled("Creation date").Sortable(true).Filterable(true);
        c.Add(o => o.ActualStatus).Titled("Status").Sortable(false).Filterable(false);
        c.Add().RenderComponentAs(typeof(Components.ColumnTaskStatus));
    };

    protected override async Task OnParametersSetAsync()
    {
        string url = NavigationManager.BaseUri + "odata/admin/task?$orderby=ActualStatus asc";
        var query = new QueryDictionary<StringValues>();

        var client = new GridODataClient<TaskResponse>(HttpClient, url, query, false, "queueGrid", columns, 10)
            .ChangePageSize(true)
            .WithMultipleFilters()
            .WithGridItemsCount();

        grid = client.Grid;
        task = client.UpdateGrid();
        await task;
    }
}