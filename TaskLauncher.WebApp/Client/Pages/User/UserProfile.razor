@page "/profile"
@using System.Security.Claims
@using TaskLauncher.Authorization
@using TaskLauncher.Common.Extensions
@using TaskLauncher.Common.Models
@attribute [Authorize]
@inject HttpClient client
@inject DialogService DialogService
@inject NavigationManager NavigationManager 

<SpinLoader IsLoading="@(loading)" Spinner="SpinnerType.Circle">
    <ContentTemplate>
        
        <ProfileComponent User=User />

        <AuthorizeView Policy="can-cancel-account">
            <Authorized>
                <button class="btn btn-danger" @onclick="CancelAsync">Cancel account</button>
            </Authorized>
        </AuthorizeView>

    </ContentTemplate>
</SpinLoader>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject]
    public SpaManagementApiClient auth0client { get; set; }

    protected bool loading = true;
    protected UserModel User { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        var principal = (await authenticationStateTask).User;
        User = (await auth0client.Users.GetAsync(principal.Claims.SingleOrDefault(i => i.Type == ClaimTypes.NameIdentifier)!.Value)).GetModel();
        User.TokenBalance = principal.TryGetClaimValue("token_balance", out var balance) ? balance : "";

        /*string idPicture = "";
        principal.TryGetClaimValue("picture", out idPicture);
        var picture = principal.TryGetClaimValue(TaskLauncherClaimTypes.Picture, out var customPicture) ? customPicture : idPicture;
        User = new()
        {
            UserId = principal.Claims.SingleOrDefault(i => i.Type == ClaimTypes.NameIdentifier)!.Value,
            NickName = principal.Claims.SingleOrDefault(i => i.Type == "nickname")!.Value,
            Email = principal.Identity!.Name,
            Picture = picture,
            TokenBalance = principal.TryGetClaimValue("token_balance", out var balance) ? balance : "",
            Vip = principal.TryGetClaimAsBool(TaskLauncherClaimTypes.Vip, out var vip) ? vip : false,
        };*/
        loading = false;
    }

    async Task CancelAsync()
    {
        var tmp = await DialogService.Confirm("Are you sure?", "Accout deletion", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (!tmp.HasValue)
            return;
        if (!tmp.Value)
            return;

        await client.DeleteAsync("auth/user/" + User.UserId);
        NavigationManager.NavigateTo("/", true);
    }
}